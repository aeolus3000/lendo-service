package actions

import (
  "fmt"
  "github.com/aeolus3000/lendo-sdk/banking"
  "github.com/aeolus3000/lendo-sdk/messaging"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/nulls"
  "github.com/gobuffalo/pop/v5"
  "github.com/gobuffalo/x/responder"
  "github.com/gofrs/uuid"
  "lendo_service/middleware"
  "lendo_service/models"
  "net/http"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Application)
// DB Table: Plural (applications)
// Resource: Plural (Applications)
// Path: Plural (/applications)
// View Template Folder: Plural (/templates/applications/)

// ApplicationsResource is the resource for the Application model
type ApplicationsResource struct{
  buffalo.Resource
}

// List gets all Applications. This function is mapped to the path
// GET /applications
func (v ApplicationsResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  applications := &models.Applications{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  statusFilter := c.Param("with_status")

  switch statusFilter {
  case banking.STATUS_REJECTED, banking.STATUS_COMPLETED, banking.STATUS_PENDING:
    q = q.Where("status = ?", statusFilter)
  }

  // Retrieve all Applications from the DB
  if err := q.All(applications); err != nil {
    return err
  }
  return responder.Wants("html", func (c buffalo.Context) error {
    // Add the paginator to the context so it can be used in the template.
    c.Set("pagination", q.Paginator)

    c.Set("applications", applications)
    return c.Render(http.StatusOK, r.HTML("/applications/index.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(applications))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(applications))
  }).Respond(c)
}

// Show gets the data for one Application. This function is mapped to
// the path GET /applications/{application_id}
func (v ApplicationsResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Application
  application := &models.Application{}

  // To find the Application the parameter application_id is used.
  if err := tx.Find(application, c.Param("application_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    c.Set("application", application)

    return c.Render(http.StatusOK, r.HTML("/applications/show.plush.html"))
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(200, r.JSON(application))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(200, r.XML(application))
  }).Respond(c)
}

// New renders the form for creating a new Application.
// This function is mapped to the path GET /applications/new
func (v ApplicationsResource) New(c buffalo.Context) error {
  c.Set("application", &models.Application{})

  return c.Render(http.StatusOK, r.HTML("/applications/new.plush.html"))
}

func convertToBankingApplication(application *models.Application) (*banking.Application, error) {
  jobId := ""
  if application.JobID.Valid {
    jobId = application.JobID.String
  }
  return &banking.Application{
    Id:        application.ID.String(),
    FirstName: application.FirstName,
    LastName:  application.LastName,
    Status:    application.Status,
    JobId:     jobId,
  }, nil
}

func convertFromBankingApplication(application *banking.Application) (*models.Application, error) {
  applicationUuid, err := uuid.FromString(application.Id)
  if err != nil {
    return nil, err
  }
  return &models.Application{
    ID:        applicationUuid,
    FirstName: application.FirstName,
    LastName:  application.LastName,
    Status:    application.Status,
    JobID:     nulls.NewString(application.JobId),
  }, nil
}

func (v ApplicationsResource) queryBank(c buffalo.Context, application *models.Application) (*models.Application, error) {
  bankingApi, ok := c.Value(middleware.CtxBanking).(banking.BankingApi)
  if !ok {
    return nil, fmt.Errorf("no banking access found")
  }
  bankingApplication, err := convertToBankingApplication(application)
  if err != nil {
    return nil, err
  }
  bankingResponse, err := bankingApi.Create(bankingApplication)
  if err != nil {
    return nil, err
  }
  return convertFromBankingApplication(bankingResponse)
}

func (v ApplicationsResource) serializeAndPublish(c buffalo.Context, application *models.Application) error {
  pub, ok := c.Value(middleware.CtxPublisher).(messaging.Publisher)
  if !ok {
    return fmt.Errorf("no publisher found")
  }

  bankingApplication, err := convertToBankingApplication(application)
  if err != nil {
    return err
  }

  bytesBuffer, serializeError := banking.SerializeFromApplication(bankingApplication)
  if serializeError != nil {
    return serializeError
  }

  publishErr := pub.Publish(bytesBuffer)
  if publishErr != nil {
    return publishErr
  }
  return nil
}

// Create adds a Application to the DB. This function is mapped to the
// path POST /applications
func (v ApplicationsResource) Create(c buffalo.Context) error {
  // Allocate an empty Application
  application := &models.Application{}

  // Bind application to the html form elements
  if err := c.Bind(application); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  if application.ID == uuid.Nil {
    application.ID, _ = uuid.NewV4()
  }

  verrs, err := application.Validate(tx)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the new.html template that the user can
      // correct the input.
      c.Set("application", application)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/applications/new.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  responseApplication, bankQueryError := v.queryBank(c, application)
  if bankQueryError != nil {
    return bankQueryError
  }
  application.Status = responseApplication.Status

  publishError := v.serializeAndPublish(c, application)
  if publishError != nil {
    return publishError
  }

  // Validate the data from the html form
  createError := tx.Create(application)
  if createError != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "application.created.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/applications/%v", application.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.JSON(application))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusCreated, r.XML(application))
  }).Respond(c)
}

// Edit renders a edit form for a Application. This function is
// mapped to the path GET /applications/{application_id}/edit
func (v ApplicationsResource) Edit(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Application
  application := &models.Application{}

  if err := tx.Find(application, c.Param("application_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  c.Set("application", application)
  return c.Render(http.StatusOK, r.HTML("/applications/edit.plush.html"))
}
// Update changes a Application in the DB. This function is mapped to
// the path PUT /applications/{application_id}
func (v ApplicationsResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Application
  application := &models.Application{}

  if err := tx.Find(application, c.Param("application_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind Application to the html form elements
  if err := c.Bind(application); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(application)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    return responder.Wants("html", func (c buffalo.Context) error {
      // Make the errors available inside the html template
      c.Set("errors", verrs)

      // Render again the edit.html template that the user can
      // correct the input.
      c.Set("application", application)

      return c.Render(http.StatusUnprocessableEntity, r.HTML("/applications/edit.plush.html"))
    }).Wants("json", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.JSON(verrs))
    }).Wants("xml", func (c buffalo.Context) error {
      return c.Render(http.StatusUnprocessableEntity, r.XML(verrs))
    }).Respond(c)
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a success message
    c.Flash().Add("success", T.Translate(c, "application.updated.success"))

    // and redirect to the show page
    return c.Redirect(http.StatusSeeOther, "/applications/%v", application.ID)
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(application))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(application))
  }).Respond(c)
}

// Destroy deletes a Application from the DB. This function is mapped
// to the path DELETE /applications/{application_id}
func (v ApplicationsResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Application
  application := &models.Application{}

  // To find the Application the parameter application_id is used.
  if err := tx.Find(application, c.Param("application_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy(application); err != nil {
    return err
  }

  return responder.Wants("html", func (c buffalo.Context) error {
    // If there are no errors set a flash message
    c.Flash().Add("success", T.Translate(c, "application.destroyed.success"))

    // Redirect to the index page
    return c.Redirect(http.StatusSeeOther, "/applications")
  }).Wants("json", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.JSON(application))
  }).Wants("xml", func (c buffalo.Context) error {
    return c.Render(http.StatusOK, r.XML(application))
  }).Respond(c)
}
